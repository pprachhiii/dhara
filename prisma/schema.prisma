generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?    // optional for Google users
  role      UserRole  @default(USER)
  resetToken String?   // stores temporary token for password reset
  resetTokenExpiry DateTime?  // optional expiry timestamp for token
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  reportVotes ReportVote[]
  driveVotes  DriveVote[]
  discussions Discussion[]
  volunteer   Volunteer?
  reports     Report[]
  submittedAuthorities Authority[] 
}

enum UserRole {
  USER
  VOLUNTEER
}

model Volunteer {
  id                String             @id @default(cuid())
  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id])
  phone             String?
  tasks             Task[]
  joinedAt          DateTime           @default(now())
  reportAuthorities ReportAuthority[]
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reporter    User     @relation(fields: [reporterId], references: [id])
  title       String
  description String
  imageUrl    String?          // legacy, keep for now
  media       String[] @default([]) // NEW: multimedia (images/videos URLs)
  status      ReportStatus @default(PENDING)

  latitude    Float?
  longitude   Float?
  city        String?
  region      String?
  country     String?

  pinCode     String? @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks              Task[]
  reportAuthorities  ReportAuthority[]
  drives             DriveReport[]
  votes              ReportVote[]
  monitorings        Monitoring[]
  votingOpenAt       DateTime?
  votingCloseAt      DateTime?
  finalVoteCount     Int?
}


model ReportVote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, reportId])
}

model Drive {
  id          String           @id @default(cuid())
  title       String
  description String?
  participant Int
  startDate   DateTime
  endDate     DateTime?
  status      DriveStatus      @default(PLANNED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  votingOpenAt   DateTime?
  votingCloseAt  DateTime?
  finalVoteCount Int?

  reports     DriveReport[]
  votes       DriveVote[]
  tasks       Task[]
  beautify    Beautification[]
  monitorings Monitoring[]
}

model DriveReport {
  id        String   @id @default(cuid())
  driveId   String
  drive     Drive    @relation(fields: [driveId], references: [id])
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])
}

model DriveVote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  driveId   String
  drive     Drive    @relation(fields: [driveId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, driveId])
}

model Task {
  id          String           @id @default(cuid())
  reportId    String
  report      Report           @relation(fields: [reportId], references: [id])

  driveId     String?
  drive       Drive?           @relation(fields: [driveId], references: [id])

  volunteerId String?
  volunteer   Volunteer?       @relation(fields: [volunteerId], references: [id])

  comfort     SocializingLevel
  timeSlot    DateTime?
  status      TaskStatus       @default(OPEN)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
}

model Beautification {
  id          String       @id @default(cuid())
  driveId     String
  drive       Drive        @relation(fields: [driveId], references: [id])
  type        BeautifyType
  description String?
  createdAt   DateTime     @default(now())
}

model Monitoring {
  id          String             @id @default(cuid())
  driveId     String?
  drive       Drive?             @relation(fields: [driveId], references: [id])
  reportId    String?
  report      Report?            @relation(fields: [reportId], references: [id])
  status      MonitoringStatus   @default(ACTIVE)
  checkDate   DateTime
  notes       String?
  createdAt   DateTime           @default(now())
}

model Authority {
  id        String   @id @default(cuid())
  name      String
  type      AuthorityType
  city      String
  region    String?
  email     String?
  phone     String?
  website   String?
  active    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  submittedById String?  // foreign key
  submittedBy   User?    @relation(fields: [submittedById], references: [id])

  reportAuthorities ReportAuthority[]
}

model ReportAuthority {
  id          String        @id @default(cuid())
  reportId    String
  report      Report        @relation(fields: [reportId], references: [id])
  authorityId String
  authority   Authority     @relation(fields: [authorityId], references: [id])
  volunteerId String?
  volunteer   Volunteer?    @relation(fields: [volunteerId], references: [id])
  status      ContactStatus @default(PENDING)
  contactedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

model Discussion {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  phase     DiscussionPhase
  content   String
  createdAt DateTime         @default(now())
}

enum ReportStatus {
  PENDING
  AUTHORITY_CONTACTED
  ELIGIBLE_DRIVE
  VOTING_FINALIZED
  IN_PROGRESS
  RESOLVED
}

enum TaskStatus {
  OPEN
  ASSIGNED
  DONE
}

enum DriveStatus {
  PLANNED
  VOTING_FINALIZED
  ONGOING
  COMPLETED
}

enum SocializingLevel {
  SOLO
  DUAL
  GROUP
}

enum AuthorityType {
  GOVERNMENT
  NGO
  OTHERS
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESPONDED
  NO_RESPONSE
}

enum BeautifyType {
  TREE_PLANTING
  WALL_PAINTING
  SIGNAGE
  CLEANUP
  OTHER
}

enum MonitoringStatus {
  ACTIVE
  COMPLETED
  ESCALATED
}

enum DiscussionPhase {
  REPORT_VOTING
  DRIVE_VOTING
}
