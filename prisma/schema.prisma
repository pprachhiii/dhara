generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  role      UserRole  @default(USER)
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  votes       Vote[]
  discussions Discussion[]
  volunteer   Volunteer?
  reports     Report[]
  submittedAuthorities Authority[] 
}

model Volunteer {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  phone             String?
  tasks             Task[]
  joinedAt          DateTime @default(now())
  reportAuthorities ReportAuthority[]
  driveVolunteers   DriveVolunteer[]
  preferences       VolunteerPreference?
  monitorings       Monitoring[]
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reporter    User     @relation(fields: [reporterId], references: [id])
  title       String
  description String
  imageUrl    String?
  media       String[] @default([])
  status      ReportStatus @default(PENDING)

  latitude    Float?
  longitude   Float?
  city        String?
  region      String?
  country     String?

  pinCode     String? @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks              Task[]
  reportAuthorities  ReportAuthority[]
  drives             DriveReport[]
  unifiedVotes       Vote[] @relation("ReportVotes")
  monitorings        Monitoring[]
  discussions        Discussion[]
  votingOpenAt       DateTime?
  votingCloseAt      DateTime?
  finalVoteCount     Int?
}

model Drive {
  id          String   @id @default(cuid())
  title       String
  description String?
  participant Int
  startDate   DateTime
  endDate     DateTime?
  status      DriveStatus @default(PLANNED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  votingOpenAt   DateTime?
  votingCloseAt  DateTime?
  finalVoteCount Int?

  reports        DriveReport[]
  unifiedVotes   Vote[] @relation("DriveVotes")
  tasks          Task[]
  enhancements   Enhancement[]      // renamed from Beautification
  monitorings    Monitoring[]
  driveVolunteers DriveVolunteer[]
  discussions    Discussion[]
}

model DriveReport {
  id        String   @id @default(cuid())
  driveId   String
  drive     Drive    @relation(fields: [driveId], references: [id])
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])

  @@unique([driveId, reportId])
}

model DriveVolunteer {
  id          String    @id @default(cuid())
  driveId     String
  drive       Drive     @relation(fields: [driveId], references: [id])
  volunteerId String
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  joinedAt    DateTime  @default(now())

  @@unique([driveId, volunteerId])
}

model Task {
  id          String   @id @default(cuid())
  reportId    String?
  report      Report?  @relation(fields: [reportId], references: [id])
  title       String   @default("Untitled Task")
  description String   @default("No description")
  driveId     String?
  drive       Drive?   @relation(fields: [driveId], references: [id])

  volunteerId String?
  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])

  engagement  EngagementLevel
  timeSlot    DateTime?
  status      TaskStatus @default(OPEN)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model Enhancement {
  id               String   @id @default(cuid())
  driveId          String
  drive            Drive    @relation(fields: [driveId], references: [id])
  type             EnhancementType
  description      String?
  referenceUrls    String[] @default([])
  createdAt        DateTime @default(now())
}

model Monitoring {
  id          String   @id @default(cuid())
  driveId     String?
  drive       Drive?   @relation(fields: [driveId], references: [id])
  reportId    String?
  report      Report?  @relation(fields: [reportId], references: [id])
  volunteerId String?
  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
  status      MonitoringStatus @default(ACTIVE)
  checkDate   DateTime
  notes       String?
  createdAt   DateTime @default(now())
}

model Authority {
  id        String   @id @default(cuid())
  name      String
  category  AuthorityCategory   // NGO, Government, Community
  role      AuthorityRole       // Cleanup vs Waste Management
  city      String
  region    String?
  email     String?
  phone     String?
  website   String?
  active    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  submittedById String?  
  submittedBy   User?    @relation(fields: [submittedById], references: [id])

  reportAuthorities ReportAuthority[]
}

model ReportAuthority {
  id          String    @id @default(cuid())
  reportId    String
  report      Report    @relation(fields: [reportId], references: [id])
  authorityId String
  authority   Authority @relation(fields: [authorityId], references: [id])
  volunteerId String?
  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
  status      ContactStatus @default(PENDING)
  contactedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Discussion {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  phase     DiscussionPhase
  content   String
  reportId  String?
  report    Report?  @relation(fields: [reportId], references: [id])
  driveId   String?
  drive     Drive?   @relation(fields: [driveId], references: [id])
  createdAt DateTime @default(now())
}

model VolunteerPreference {
  id           String    @id @default(cuid())
  volunteerId  String    @unique
  volunteer    Volunteer @relation(fields: [volunteerId], references: [id])

  engagement   EngagementLevel
  availability String?
  skills       String[]  @default([])
  effortLevel  EffortLevel @default(MEDIUM)

  updatedAt    DateTime @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  reportId  String?
  report    Report?  @relation("ReportVotes", fields: [reportId], references: [id])

  driveId   String?
  drive     Drive?   @relation("DriveVotes", fields: [driveId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, reportId])
  @@unique([userId, driveId])
}

enum UserRole {
  USER
  VOLUNTEER
}

enum ReportStatus {
  PENDING
  AUTHORITY_CONTACTED
  RESOLVED_BY_AUTHORITY
  ELIGIBLE_FOR_VOTE
  VOTING_FINALIZED
  ELIGIBLE_FOR_DRIVE
  DRIVE_FINALIZED
  IN_PROGRESS
  UNDER_MONITORING
  RESOLVED
}

enum TaskStatus {
  OPEN
  ASSIGNED
  COMPLETED
}

enum DriveStatus {
  PLANNED
  VOTING_FINALIZED
  ONGOING
  COMPLETED
}

enum EngagementLevel {
  INDIVIDUAL
  PAIR
  GROUP
}

enum EffortLevel {
  LOW
  MEDIUM
  HIGH
}

enum AuthorityCategory {
  GOVERNMENT
  NGO
  COMMUNITY
  OTHER
}

enum AuthorityRole {
  CLEANUP
  WASTE_MANAGEMENT
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESPONDED
  NO_RESPONSE
}

enum EnhancementType {
  TREE_PLANTING
  MURAL_PAINTING
  SIGNAGE_INSTALLATION
  OTHER
}

enum MonitoringStatus {
  ACTIVE
  COMPLETED
  ESCALATED
}

enum DiscussionPhase {
  REPORT_VOTING
  DRIVE_VOTING
  GENERAL
}
